import chromium from "chrome-aws-lambda";
import puppeteer from "puppeteer-core";

async function generatePDFHtml(data) {
  const htmlContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Form Data</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 0;
        }
        .container {
          width: 90%;
          margin: auto;
          padding: 20px;
          border: 1px solid #ccc;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
          color: #4CAF50;
          text-align: center;
        }
        .field {
          margin: 10px 0;
        }
        .label {
          font-weight: bold;
        }
        .value {
          color: #333;
          margin-left: 10px;
        }
        .footer {
          text-align: center;
          margin-top: 20px;
          font-size: 12px;
          color: #666;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Form Submission Details</h1>
        ${Object.entries(data)
          .map(
            ([key, value]) =>
              `<div class="field"><span class="label">${key}:</span> <span class="value">${value}</span></div>`
          )
          .join("")}
        <div class="footer">Generated by Our System</div>
      </div>
    </body>
    </html>
  `;
  return htmlContent;
}

export async function POST(req) {
  try {
    const formData = await req.json(); // Parse the JSON body
    const htmlContent = await generatePDFHtml(formData);

    const browser = await puppeteer.launch({
      args: chromium.args,
      executablePath: await chromium.executablePath,
      headless: true,
      defaultViewport: chromium.defaultViewport,
    });

    const page = await browser.newPage();
    await page.setContent(htmlContent, { waitUntil: "load" });

    const pdfBuffer = await page.pdf({
      format: "A4",
      printBackground: true,
    });

    await browser.close();

    return new Response(pdfBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": 'attachment; filename="form-data.pdf"',
      },
    });
  } catch (error) {
    console.error("Error processing form submission:", error);
    return new Response(
      JSON.stringify({ message: `An error occurred: ${error.message}` }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

export async function GET(req) {
  try {
    return new Response(
      JSON.stringify({ message: "GET method not implemented" }),
      {
        status: 405,
        headers: { "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("Error processing GET request:", error);
    return new Response(
      JSON.stringify({ message: "An error occurred while processing the GET request" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
